Базовые команды

cd [name] - переход в дерикторию name
cd .. - переход в дерикторию вверх по пути
ls - просмотр данной дериктории
nano [name] - редактирование файла
rm/mkdir [name] - удаление/создание дериктории
touch [name] - создание файла
rm [name] - удаление файла
mv [name] - перемещение файла
ssh-keygen - создание публичного и приватного ssh ключа, при вводе команды у вас спросят хотите ли вы ввести пароль для ключей
             чтобы оставить их без пароля, нажмите Enter несколько раз.
chmod u+x [name] - флаг на то, что файл является скриптом


Базовые команды гита

git init - инициализировать гит по умолчанию ветка master (git init -o [name] - инициализация гит с выбранным названием [name])
git status - проверка статуса файлов (проверка индексированных файлов готовых или не готовых отправится в коммит)
git log - проверка доступных коммитов, также просмотр сколько существует веток и где находиться HEAD
git add - добавление файла в и индекс (индексация файлов)
git commit - создание коммита (добавление всех индексированных файлов в коммит) после введения этой команды
             вас отправят в файл где нужно прописать название данного коммита, поэтому проще и быстрей сделать
             git commit -m "Name commit" так вы сразу введёте название коммита не переходя в файл
git remote - просмотр установленных соединений
git remote add [name] [url] - создание соединения по url в name первое соединение обычно пишется origin, так как оно по умолчанию
                                  другие соединения можно называть уже по разному
git remote rm [name] - удаление соединения
git push [назв.соединения по умолчанию origin] [назв.ветки по умолчанию master] - отправляет файлы ветки на сервер по указанному соединению
git branch [name] - создание ветки, но не переключение на неё HEAD
git checkout [назв.ветки] - переключение HEAD на выбранную ветку, также можно создать и сразу переключиться на только что созданную ветку git checkout -b [name branch]
git merge [name] - производит слияние ветки name и ту на которую указывает HEAD
git branch -d [name] - удаление ветки, если она уже слита с другой веткой, если она не слита то нужен параметр не -d, а -D, но в данном случаи вы потеряете всё то находиться
                       на этой ветке
git branch -v - просмотр последнего комита на каждой ветке
git branch --merged - показывает какие ветки слиты с той на которую указывает HEAD(тоесть с вашей нынешней веткой)
git branch --no-merged - показывает ветки, которые вы ещё не слили с данной
git clone [url] - полное копирование репозитория, в действующую дерикторию
git pull [url] - синхронизация файлов репозитория и ваших файлов(без синхронизации вы не сможете использовать git push, если в репозитории происхоидили изменения)
